# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

import bank_service_pb2 as bank__service__pb2


class GreeterStub(object):
    """The greeting service definition.
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.GetTotalEmployees = channel.unary_unary(
                '/Greeter/GetTotalEmployees',
                request_serializer=bank__service__pb2.BankRequest.SerializeToString,
                response_deserializer=bank__service__pb2.TotalEmployeesResponse.FromString,
                )
        self.AddBranch = channel.unary_unary(
                '/Greeter/AddBranch',
                request_serializer=bank__service__pb2.BankAllAtributesResponse.SerializeToString,
                response_deserializer=bank__service__pb2.BranchResponse.FromString,
                )
        self.GetBranchesAll = channel.unary_unary(
                '/Greeter/GetBranchesAll',
                request_serializer=bank__service__pb2.Empty.SerializeToString,
                response_deserializer=bank__service__pb2.BankAllAtributesResponse.FromString,
                )
        self.GetCashRequirement = channel.unary_unary(
                '/Greeter/GetCashRequirement',
                request_serializer=bank__service__pb2.BankRequest.SerializeToString,
                response_deserializer=bank__service__pb2.GetCashRequirementResponse.FromString,
                )
        self.UpdateBranchSize = channel.unary_unary(
                '/Greeter/UpdateBranchSize',
                request_serializer=bank__service__pb2.UpdateBranchSizeRequest.SerializeToString,
                response_deserializer=bank__service__pb2.UpdateBranchSizeResponse.FromString,
                )


class GreeterServicer(object):
    """The greeting service definition.
    """

    def GetTotalEmployees(self, request, context):
        """Get total number of employees in the bank
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def AddBranch(self, request, context):
        """Add a branch to the bank
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetBranchesAll(self, request, context):
        """get a branch with ID
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetCashRequirement(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def UpdateBranchSize(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_GreeterServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'GetTotalEmployees': grpc.unary_unary_rpc_method_handler(
                    servicer.GetTotalEmployees,
                    request_deserializer=bank__service__pb2.BankRequest.FromString,
                    response_serializer=bank__service__pb2.TotalEmployeesResponse.SerializeToString,
            ),
            'AddBranch': grpc.unary_unary_rpc_method_handler(
                    servicer.AddBranch,
                    request_deserializer=bank__service__pb2.BankAllAtributesResponse.FromString,
                    response_serializer=bank__service__pb2.BranchResponse.SerializeToString,
            ),
            'GetBranchesAll': grpc.unary_unary_rpc_method_handler(
                    servicer.GetBranchesAll,
                    request_deserializer=bank__service__pb2.Empty.FromString,
                    response_serializer=bank__service__pb2.BankAllAtributesResponse.SerializeToString,
            ),
            'GetCashRequirement': grpc.unary_unary_rpc_method_handler(
                    servicer.GetCashRequirement,
                    request_deserializer=bank__service__pb2.BankRequest.FromString,
                    response_serializer=bank__service__pb2.GetCashRequirementResponse.SerializeToString,
            ),
            'UpdateBranchSize': grpc.unary_unary_rpc_method_handler(
                    servicer.UpdateBranchSize,
                    request_deserializer=bank__service__pb2.UpdateBranchSizeRequest.FromString,
                    response_serializer=bank__service__pb2.UpdateBranchSizeResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'Greeter', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class Greeter(object):
    """The greeting service definition.
    """

    @staticmethod
    def GetTotalEmployees(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/Greeter/GetTotalEmployees',
            bank__service__pb2.BankRequest.SerializeToString,
            bank__service__pb2.TotalEmployeesResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def AddBranch(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/Greeter/AddBranch',
            bank__service__pb2.BankAllAtributesResponse.SerializeToString,
            bank__service__pb2.BranchResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetBranchesAll(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/Greeter/GetBranchesAll',
            bank__service__pb2.Empty.SerializeToString,
            bank__service__pb2.BankAllAtributesResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetCashRequirement(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/Greeter/GetCashRequirement',
            bank__service__pb2.BankRequest.SerializeToString,
            bank__service__pb2.GetCashRequirementResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def UpdateBranchSize(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/Greeter/UpdateBranchSize',
            bank__service__pb2.UpdateBranchSizeRequest.SerializeToString,
            bank__service__pb2.UpdateBranchSizeResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
